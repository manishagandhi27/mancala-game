import time
import pandas as pd
from docling.document import DocumentConverter
from sentence_transformers import SentenceTransformer, util
from transformers import AutoTokenizer
import nltk
nltk.download('punkt')

# Initialize components
doc_converter = DocumentConverter()
model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
tokenizer = AutoTokenizer.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')

# Step 1: Convert the document
input_doc_path = "your_document.pdf"
conv_res = doc_converter.convert(input_doc_path)

# Step 2: Extract Text Items
text_chunks = [text_item.text for text_item in conv_res.document.texts]

# Step 3: Convert Tables into Searchable Text
def convert_table_to_text(table):
    table_chunks = []
    table_caption = f"Table Caption: {table.caption}" if table.caption else "Table"
    table_df: pd.DataFrame = table.export_to_dataframe()
    
    # Detect table structure and handle different types
    if not table_df.empty:
        if len(table_df.columns) == 2:  # Key-Value structure
            for _, row in table_df.iterrows():
                table_chunks.append(f"{table_caption} - {row[0]}: {row[1]}")
        else:  # Standard multi-column table
            for _, row in table_df.iterrows():
                row_text = ", ".join(f"{col}: {row[col]}" for col in table_df.columns)
                table_chunks.append(f"{table_caption} - {row_text}")
    
    return table_chunks

table_chunks = []
for table in conv_res.document.tables:
    table_chunks.extend(convert_table_to_text(table))

# Step 4: Combine text and table chunks
all_chunks = text_chunks + table_chunks

# Step 5: Token-Based Chunking with Overlap
def split_with_overlap(chunks, chunk_size=300, overlap=50):
    final_chunks = []
    for chunk in chunks:
        tokens = tokenizer.encode(chunk)
        for i in range(0, len(tokens), chunk_size - overlap):
            chunk_tokens = tokens[i:i + chunk_size]
            chunk_text = tokenizer.decode(chunk_tokens, skip_special_tokens=True)
            final_chunks.append(chunk_text)
    return final_chunks

tokenized_chunks = split_with_overlap(all_chunks)

# Step 6: Semantic Merging
semantic_chunks = []
current_chunk = [tokenized_chunks[0]]
embeddings = model.encode(tokenized_chunks, convert_to_tensor=True)

for i in range(1, len(tokenized_chunks)):
    similarity = util.pytorch_cos_sim(embeddings[i-1], embeddings[i]).item()
    if similarity > 0.7:  # Adjust the threshold for semantic coherence
        current_chunk.append(tokenized_chunks[i])
    else:
        semantic_chunks.append(" ".join(current_chunk))
        current_chunk = [tokenized_chunks[i]]

if current_chunk:
    semantic_chunks.append(" ".join(current_chunk))

# Step 7: Output final semantic chunks
print("Final Semantic Chunks:")
for idx, chunk in enumerate(semantic_chunks):
    print(f"Chunk {idx + 1}:\n{chunk}\n")
