def table_to_flattened_json(table_json):
    """
    Convert a table from a JSON structure (with multi-row, multi-column headers and rows) into a flattened JSON format.
    Handles both single and multi-header structures.
    """
    flattened_data = []

    # Extract table cells
    if 'tables' not in table_json or not table_json['tables']:
        return "No tables found in the provided JSON."

    for table in table_json['tables']:
        cells = table['data']['table_cells']
        headers = {}
        rows = {}
        
        # Organize headers and data cells
        for cell in cells:
            row_index = cell.get('start_row_offset_idx', -1)
            col_index = cell.get('start_col_offset_idx', -1)
            text = cell.get('text', '').strip()

            if row_index < 2:  # Assuming first two rows are headers
                if col_index not in headers:
                    headers[col_index] = []
                headers[col_index].append(text)
            else:
                if row_index not in rows:
                    rows[row_index] = {}
                rows[row_index][col_index] = text

        # Flatten each row into a structured JSON with headers as keys
        for row_index in sorted(rows.keys()):
            row_data = {
                "row_index": row_index,
                "data": {}
            }
            for col_index in sorted(headers.keys()):
                header = " ".join(headers[col_index]).strip()
                value = rows[row_index].get(col_index, "")
                row_data["data"][header] = value
            flattened_data.append(row_data)

    return flattened_data
