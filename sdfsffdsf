def merge_tables_without_page_numbers(tables):
    """
    Merge multi-page tables without using page numbers by relying on structural and content-based heuristics.
    """
    merged_tables = []
    current_table = {
        "data": {
            "table_cells": []
        }
    }
    reference_header = None
    last_row_offset = 0
    last_column_count = None

    for table in tables:
        cells = table['data']['table_cells']
        current_column_count = max(cell['start_col_offset_idx'] for cell in cells) + 1
        has_column_header = any(cell.get('column_header', False) for cell in cells)
        current_header = extract_header(cells) if has_column_header else None

        if reference_header is None:
            # First table, initialize merging context
            reference_header = current_header
            last_column_count = current_column_count
            current_table['data']['table_cells'].extend(cells)
            last_row_offset = max(cell['end_row_offset_idx'] for cell in cells) + 1
        elif current_column_count == last_column_count and is_continuation(current_header, reference_header):
            # Continuation: Merge the table
            for cell in cells:
                cell['start_row_offset_idx'] += last_row_offset
                cell['end_row_offset_idx'] += last_row_offset
                current_table['data']['table_cells'].append(cell)
            last_row_offset = max(cell['end_row_offset_idx'] for cell in cells) + 1
        else:
            # New table: Append the current table and start a new one
            merged_tables.append(current_table)
            current_table = {
                "data": {
                    "table_cells": cells
                }
            }
            reference_header = current_header
            last_column_count = current_column_count
            last_row_offset = max(cell['end_row_offset_idx'] for cell in cells) + 1

    # Add the last merged table
    merged_tables.append(current_table)
    return merged_tables


def extract_header(cells):
    """ Extract the first row as a header for comparison. """
    return [cell['text'].strip() for cell in cells if cell['start_row_offset_idx'] == 0]


def is_continuation(current_header, reference_header):
    """
    Determine if the current table is a continuation of the previous one.
    Use column count and header similarity as primary checks.
    """
    if current_header is None:
        return True  # No header indicates a likely continuation
    if reference_header and headers_are_similar(current_header, reference_header):
        return True
    return False


def headers_are_similar(header1, header2):
    """ Compare two headers to determine if they are similar. """
    if not header1 or not header2:
        return False
    return header1 == header2 or set(header1).issubset(set(header2))


# Example usage with tables simulating multi-page tables without page numbers
fragmented_tables = [
    {
        "data": {
            "table_cells": [
                {"start_row_offset_idx": 0, "start_col_offset_idx": 0, "text": "Customer", "column_header": True},
                {"start_row_offset_idx": 0, "start_col_offset_idx": 1, "text": "Order ID", "column_header": True},
                {"start_row_offset_idx": 1, "start_col_offset_idx": 0, "text": "John Doe"},
                {"start_row_offset_idx": 1, "start_col_offset_idx": 1, "text": "1234"}
            ]
        }
    },
    {
        "data": {
            "table_cells": [
                {"start_row_offset_idx": 0, "start_col_offset_idx": 0, "text": "Jane Smith"},
                {"start_row_offset_idx": 0, "start_col_offset_idx": 1, "text": "5678"}
            ]
        }
    },
    {
        "data": {
            "table_cells": [
                {"start_row_offset_idx": 0, "start_col_offset_idx": 0, "text": "Product", "column_header": True},
                {"start_row_offset_idx": 0, "start_col_offset_idx": 1, "text": "Price", "column_header": True},
                {"start_row_offset_idx": 1, "start_col_offset_idx": 0, "text": "Laptop"},
                {"start_row_offset_idx": 1, "start_col_offset_idx": 1, "text": "$1000"}
            ]
        }
    }
]

# Merge tables using structural continuity
merged_tables = merge_tables_without_page_numbers(fragmented_tables)

import json
print(json.dumps(merged_tables, indent=2))
