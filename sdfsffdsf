def merge_pdf_tables(tables, body):
    """
    Merge multi-page tables for PDFs by analyzing the body sequence to determine continuation.
    Avoid merging unrelated tables when non-continuation elements exist between them.
    """
    merged_tables = []
    current_table = None
    last_row_offset = 0
    reference_header = None

    for i, table in enumerate(tables):
        cells = table['data']['table_cells']
        current_page = table['prov']['page_no']
        table_ref = table['self_ref']
        current_column_count = max(cell['start_col_offset_idx'] for cell in cells) + 1
        has_column_header = any(cell.get('column_header', False) for cell in cells)
        current_header = extract_header(cells) if has_column_header else None

        if current_table is None:
            # First table, initialize merging context
            current_table = create_new_table(table, cells)
            reference_header = current_header
            last_row_offset = max(cell['end_row_offset_idx'] for cell in cells) + 1
        else:
            next_table_ref = tables[i]['self_ref'] if i < len(tables) - 1 else None
            if next_table_ref and is_continuation_with_strict_check(table_ref, next_table_ref, body):
                # Continuation table logic
                for cell in cells:
                    cell['start_row_offset_idx'] += last_row_offset
                    cell['end_row_offset_idx'] += last_row_offset
                    current_table['data']['table_cells'].append(cell)
                last_row_offset = max(cell['end_row_offset_idx'] for cell in cells) + 1
            else:
                # New table detected, save the current one and start a new one
                merged_tables.append(current_table)
                current_table = create_new_table(table, cells)
                reference_header = current_header
                last_row_offset = max(cell['end_row_offset_idx'] for cell in cells) + 1

    # Add the last merged table
    if current_table:
        merged_tables.append(current_table)
    return merged_tables


def is_continuation_with_strict_check(current_ref, next_ref, body):
    """
    Determine if two tables are continuations based on the body sequence.
    Strictly ensure no non-continuation elements exist between the two tables.
    """
    between_refs = get_refs_between(current_ref, next_ref, body)
    for ref in between_refs:
        element = find_element_by_ref(ref, body)
        if element and element['label'] not in ('page_header', 'page_footer', 'picture'):
            return False  # Non-continuation element found
    return True  # Only continuation elements found


def get_refs_between(current_ref, next_ref, body):
    """ Extract references between two tables in the body sequence. """
    refs = [item['$ref'] for item in body]
    if current_ref in refs and next_ref in refs:
        start = refs.index(current_ref)
        end = refs.index(next_ref)
        return refs[start + 1:end]  # Get refs between the two tables
    return []


def find_element_by_ref(ref, body):
    """ Find the element in the document with the given self_ref. """
    for element in body:
        if element.get('self_ref') == ref:
            return element
    return None


def extract_header(cells):
    """ Extract the first row as a header for comparison. """
    return [cell['text'].strip() for cell in cells if cell['start_row_offset_idx'] == 0]


def create_new_table(table, cells):
    """ Create a new table structure for merging. """
    return {
        "data": {
            "table_cells": cells
        },
        "prov": table['prov'],
        "self_ref": table['self_ref']
    }


# Example usage
tables = [
    {
        "data": {
            "table_cells": [
                {"start_row_offset_idx": 0, "start_col_offset_idx": 0, "text": "Customer", "column_header": True},
                {"start_row_offset_idx": 0, "start_col_offset_idx": 1, "text": "Order ID", "column_header": True},
                {"start_row_offset_idx": 1, "start_col_offset_idx": 0, "text": "John Doe"},
                {"start_row_offset_idx": 1, "start_col_offset_idx": 1, "text": "1234"}
            ]
        },
        "prov": {"page_no": 1},
        "self_ref": "#/tables/0"
    },
    {
        "data": {
            "table_cells": [
                {"start_row_offset_idx": 0, "start_col_offset_idx": 0, "text": "Jane Smith"},
                {"start_row_of
